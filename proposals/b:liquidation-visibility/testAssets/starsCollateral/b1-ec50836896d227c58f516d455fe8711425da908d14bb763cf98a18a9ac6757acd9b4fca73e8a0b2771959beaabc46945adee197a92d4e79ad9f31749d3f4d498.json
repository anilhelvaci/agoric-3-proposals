{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "ec50836896d227c58f516d455fe8711425da908d14bb763cf98a18a9ac6757acd9b4fca73e8a0b2771959beaabc46945adee197a92d4e79ad9f31749d3f4d498"
}