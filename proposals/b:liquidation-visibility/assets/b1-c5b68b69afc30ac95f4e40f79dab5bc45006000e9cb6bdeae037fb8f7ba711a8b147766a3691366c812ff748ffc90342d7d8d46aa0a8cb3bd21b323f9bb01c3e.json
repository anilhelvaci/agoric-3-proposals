{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "c5b68b69afc30ac95f4e40f79dab5bc45006000e9cb6bdeae037fb8f7ba711a8b147766a3691366c812ff748ffc90342d7d8d46aa0a8cb3bd21b323f9bb01c3e"
}